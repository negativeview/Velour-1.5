<?php

require_once '/opt/local/apache2/protected/classes/BaseObject.php';

/**
 * Test class for BaseObject.
 * Generated by PHPUnit on 2011-05-03 at 19:34:38.
 */
class BaseObjectTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var BaseObject
     */
    protected $ids;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	$this->ids = db_many("SELECT id FROM obj_static");
    }
    
    public function testNoFetchAtStart()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$this->assertEmpty($obj->getRaw());
    	}
    }
    
    public function testAppropriateType()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    	}
    }
    
    public function testSlug()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$this->assertNotEquals($obj->getSlug(), '');
    		$this->assertNotEquals($obj->getSlug(), null);
    	}
    }
    
    public function testMenuTitle()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$this->assertNotEquals($obj->getMenuTitle(), '');
    		$this->assertNotEquals($obj->getMenuTitle(), null);
    	}
    }
    
    public function testPrivacySetting()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$this->assertContains(
    			$obj->getPrivacySetting(),
    			array(
    				'complex',
    				'parent',
    				'project',
    				'public'
    			)
    		);
    	}
    }
    
    public function testCreator()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$creator = $obj->getCreator();
    		if ($creator !== null) {
    			$creator = new BaseObject($creator);
    			$this->assertNotNull($creator);
    			$this->assertEquals($creator->getType(), 1);
    		}
    	}
    }
    
    public function testParent()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$parent = $obj->getParent();
    		if ($parent !== null) {
    			$parent = new BaseObject($parent);
    			$this->assertNotNull($parent);
    			$this->assertNotNull($parent->getType());
    			
    			$this->assertFalse($obj->hasBeenUpdated());
    			$obj->setParent($parent);
    			$this->assertTrue($obj->hasBeenUpdated());
    			$this->assertEquals($obj->getParent(), $parent->getId());
    			$obj->setParent($parent->getId());
    			$this->assertEquals($obj->getParent(), $parent->getId());
    		}
    	}
    }
    
    public function testProject()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$project = $obj->getProject();
    		if ($project !== null) {
    			$project = new BaseObject($project);
    			$this->assertNotNull($project);
    			$this->assertEquals($project->getType(), 2);
    		}
    	}
    }
    
    public function testCreated()
    {
    	foreach ($this->ids as $id) {
    		$obj = new BaseObject($id['id']);
    		$this->assertTrue(is_object($obj->getCreated()), 'BaseObject::getCreated does not return an object.');
    		$this->assertEquals(get_class($obj->getCreated()), 'DateTime');
    	}
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
}
?>
