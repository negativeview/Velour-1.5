<?php

require_once '/opt/local/apache2/protected/classes/BaseObject.php';

/**
 * Test class for BaseObject.
 * Generated by PHPUnit on 2011-05-03 at 19:34:38.
 */
class BaseObjectTest extends PHPUnit_Framework_TestCase
{
	private $_subscriber;
	private $_incCount;
	private $_lastData;
	private $_latsOb;
	
	static private $_staticIncCount;
	
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    	$this->_subscriber = array($this, 'countingCallback');
    	$this->_incCount = 0;
    	$this->_lastData = null;
    	$this->_lastOb = null;
    	
    	CoreObject::destroyCache();
    	
    	self::$_staticIncCount = 0;
    }
    
    public function testRaw()
    {
    	$ob = CoreObject::getById(1);
    	$ob->getTitle();
    }
    
    public function testDefaultHasNotChanged()
    {
    	$ob = CoreObject::getById(1);
    	$this->assertFalse($ob->hasChanged());
    }
    
    public function testHasChanged()
    {
    	$ob = CoreObject::getById(1);
    	$ob->setTitle('Daniel');
    	$this->assertTrue($ob->hasChanged());
    }
    
    public function testActuallySaves()
    {
//		$db = DB::getInstance();
//		$db->addTable('base_object');
//		$db->addColumns('base_object', array('id'));
//		$all_base_objects = $db->getAll();

    	$ob = CoreObject::getById(1);
    	$old = $ob->getViews();
    	$ob->addView();
    	$this->assertEquals($old + 1, $ob->getViews());
    	CoreObject::destroyCache();
    	
    	$ob = CoreObject::getById(1);
    	$this->assertEquals($old + 1, $ob->getViews());
    }
    
    public function testCanSaveString()
    {
    	$ob = CoreObject::getById(1);
    	
		// Any random changing value.
    	$t = time();
    	
    	$ob->setTitle($t);
    	CoreObject::destroyCache();
    	
    	$ob = CoreObject::getById(1);
    	$db = DB::getInstance();
    	$this->assertEquals($t, $ob->getTitle(), print_r($db->getCache(), 1));
    }
    
    public function testCanSaveText()
    {
    	$ob = CoreObject::getById(1);
    	
		// Any random changing value.
    	$t = time();
    	
    	$ob->setBody($t);
    	CoreObject::destroyCache();
    	
    	$ob = CoreObject::getById(1);
    	$this->assertEquals($t, $ob->getBody());
    }
    
    protected function tearDown()
    {
    }
}
?>
